dialog (Result) {
  match: _ (this) {
    from-property: Schedule (schedule) {
      from-output: GetSchedule (action)
    }
  }

  if ( exists(action.time)) {
    if (size(schedule.matches) == 0 && exists(action.team)) { // team has no matches for requested time
      template ("#{input(action.team)} aren't playing #{input(action.time)}.")
    }
    template ("I found #{size(schedule.matches)} #{concept(schedule.matches)} scheduled #{input(action.time)}[ for #{input(action.team)}].")
  } else-if (exists(action.team)) {
    if (size(schedule.matches) == 1) { // only one match, give a bit more info (schduled start time)
      template ("#{input(action.team)} has one upcoming match[ on #{value(schedule.matches[0].time.start)}].")
    }
    template ("#{input(action.team)} has #{size(schedule.matches)} upcoming #{concept(schedule.matches)}.[ The first one is on #{value(schedule.matches[0].time.start)}.]")
  } else {
    // No user inputs given
    if (size(schedule.series) == 1 && schedule.series[0].status == 'InProgress') {
      // Series in progress
      if (size(schedule.tournaments) == 1 && schedule.tournaments[0].status == 'InProgress') {
        // Tournamnet in progress
        template ("#{value(schedule.series[0].name)}, #{value(schedule.tournaments[0].name)} is in progress[, with #{size(schedule.matches)} #{concept(schedule.matches)} scheduled.]")
      } else {
        // TODO: dialog about last tournament's winners, and when next series will begin
        template ("#{value(schedule.series[0].name)}, #{value(schedule.tournaments[0].name)} is in progress.")
      }
      template ("#{value(schedule.series[0].name)}, #{value(schedule.tournaments[0].name)} is in progress.")
      
    } else {
      // Off season
      template ("Overwatch League is in its off season.")
      // TODO: off season dialog - last series' winners, when will new series begin
    }
  }
  
  template ("I found #{size(schedule.matches)} #{concept(schedule.matches)}.")
}
